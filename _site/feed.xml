<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 13 Mar 2018 12:54:53 +0800</pubDate>
    <lastBuildDate>Tue, 13 Mar 2018 12:54:53 +0800</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Linux下Gedit的脚本设置</title>
        <description>&lt;p&gt;因为后面可能非常非常经常要用Gedit写题了，所以来总结一下如何用Gedit的脚本功能来搭建一个舒服的调题环境为妙。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;基础配置&lt;/h3&gt;

&lt;p&gt;首先找到Gedit的偏好设定并且将运行外部脚本的功能开起来，然后打开工具找到“管理外部插件”并且新建一个内容如下的脚本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GEDIT_CURRENT_DOCUMENT_DIR&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GEDIT_CURRENT_DOCUMENT_NAME&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt;|cut -d. -f1&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
g++ &lt;span class=&quot;nv&quot;&gt;$s&lt;/span&gt; -o &lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Success!&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Now let&#39;s go...&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
gnome-terminal --working-directory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt; -x bash -c &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;time &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$d&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$c&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;; echo; echo &#39;Press ENTER to continue...&#39;;read&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;（这里末尾有\的是指接下一行，至于最后一段的用&amp;amp;&amp;amp;连接是为了编译失败就不运行。在实际使用的时候可以不换行并且删掉\字符，这里使用是为了能够保证代码长度不超过框框的宽度）&lt;/p&gt;

&lt;p&gt;那这里面的句子是什么意思呢？&lt;/p&gt;

&lt;p&gt;其中第一行代表这是一个脚本。&lt;/p&gt;

&lt;p&gt;第二行定义了一个值为当前目录的变量。&lt;/p&gt;

&lt;p&gt;第三行定义了一个值为当前的cpp文件名的变量。&lt;/p&gt;

&lt;p&gt;第四行是把当前的文件名以点分割并且取前半段。注意这里使用的是重音符 ‘`‘，不要打成单引号啦~&lt;/p&gt;
&lt;text&gt;
第五行是先编译运行当前的cpp文件（g++ $s -o $c）；
然后在下方的提示框里面输出成功的消息（两个echo）；
接着打开一个新终端（gnome-terminal）：
先把这个终端的运行目录设定成当前的目录（--working-directory=$d）；
然后是我也不知道是干什么的-x bash；
然后是执行一些命令（-c），命令的内容用双引号包起来。命令的内容首先是计时地运行你的程序（time $d/$c），注意这里是绝对路径，接着输出一个换行（echo），然后输出一行提示信息（echo &#39;Press ENTER to continue&#39;，注意是单引号），最后一个read实现输入等到回车后再关闭窗口。
&lt;/text&gt;
&lt;p&gt;接着把它保存为快捷键Ctrl+F11，并保存当前文件即可。&lt;/p&gt;

&lt;p&gt;接下来按下Ctrl+F11，如果编译失败就会在下方显示错误信息，成功就会新弹出一个超级良心der终端，是给这个程序专用的，再也不用担心做题的时候程序提前退出然后因为是用粘贴的结果就在终端里面打了一堆乱七八糟的命令x&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;调试模式&lt;/h3&gt;

&lt;p&gt;新开一个脚本，把刚刚那一段东西里面的g++后面的编译命令里增加一个-DDEBUG，这个脚本快捷键保存为Ctrl+F8，然后在自己的代码开头加入如下一段内容：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifdef DEBUG
#define debug(a...) fprintf(stderr,a);
#else
#define debug(a...)
#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然后接下来在代码里面要调试的地方直接调用debug函数，例如&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;接下来就可以实现如果是Ctrl+F8就会往stderr里面输出debug语句，否则按Ctrl+F11不会输出，评测的时候也不会输出的功能惹。&lt;/p&gt;

&lt;p&gt;注意：在define里面的fprintf后面最好接一个分号，防止自己一不小心就打出&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;x=%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;werken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样的代码，然后就成功在正式测试的时候CE啦！&lt;/p&gt;

&lt;p&gt;当然，自己定义一个新的空函数也是可以的，可以降低CE风险。&lt;/p&gt;

&lt;p&gt;但是还是要注意的是如果你为了调试在 $O(n)$ 的算法里面调用了 $O(n^2)$ 次的空函数不删仍然是会T得很惨的吧……&lt;/p&gt;

&lt;p&gt;所以也不是万能的。（这句话的深层含义：出锅了不要打我啊喂！）&lt;/p&gt;

&lt;p&gt;于是就可以成功地在debug和release模式之间自由切换了x&lt;/p&gt;

&lt;p&gt;所以大概就长成这样子了如果读不懂可能就是我的语文能力问题了这我也救不了自己了。&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2018/03/11/Linux%E4%B8%ADGedit%E7%9A%84%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2018/03/11/Linux%E4%B8%ADGedit%E7%9A%84%E8%84%9A%E6%9C%AC%E8%AE%BE%E7%BD%AE.html</guid>
        
        
      </item>
    
      <item>
        <title>NOIWC2018游记</title>
        <description>&lt;p&gt;到长沙&lt;del&gt;玩了一发&lt;/del&gt;参加了NOI2018冬眠营，然后因为太弱正解基本都没听懂，但是学了一堆的奇奇怪怪的东西，像什么分析方法乱搞骗分之类的，这里把个人认为比较好的idea不完全列举如下。&lt;del&gt;不过感觉拿出去应该都是烂大街的东西。&lt;/del&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;势能函数分析&lt;/h3&gt;

&lt;p&gt;为了分析算法的时间复杂度/正确性等，我们引入当前状态的势能函数，然后证明每次操作势能函数的变化量一定满足一些条件，来推出算法的时间复杂度/正确性是对的。&lt;/p&gt;

&lt;p&gt;比如说我们现在要证明一个算法跑出的解不会超过最优解的 $k$ 倍，那么我们就引入势能函数 $\phi$ 代表当前我们的状态下我们离最优解差多少（这里 $\phi$ 的设计需要比较合理），然后假设最优解和我们分别操作一轮，最优解使 $\phi$ 增大了 $kd$，而我们的操作使 $\phi$ 减少了 $d$，那么我们就证明出了我们的算法跑出的解确实不会超过最优解的 $k$ 倍。&lt;/p&gt;

&lt;p&gt;这样做便于数学表述。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;判断点在多边形内&lt;/h3&gt;

&lt;p&gt;你不一定要作射线去跟多边形交，可以作折线，这样就可以支持特定情况下点的移动了（比如网格图里面）。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;遗传算法的全过程&lt;/h3&gt;

&lt;p&gt;//预计开一个新坑，然后配一道题来说，后面可能会把链接挂过来。&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;蚁群算法的全过程&lt;/h3&gt;

&lt;p&gt;//同上。&lt;/p&gt;

&lt;h3 id=&quot;fft&quot;&gt;FFT的物理意义&lt;/h3&gt;

&lt;p&gt;其实我最早学FFT的时候是这样的：&lt;/p&gt;

&lt;p&gt;-要学FFT肯定要先学FT呀！&lt;/p&gt;

&lt;p&gt;（学了好久好久的FT，爆肝物理）&lt;/p&gt;

&lt;p&gt;-我大概了解FT在干什么了。那么FFT呢？&lt;/p&gt;

&lt;p&gt;（开始看FFT）&lt;/p&gt;

&lt;p&gt;-FFT和FT有什么关系么！你说时域转成频域就可以做乘积，然后就贴了一个板子，这个板子是在做什么呀！&lt;/p&gt;

&lt;p&gt;（滚回去继续理解FT）&lt;/p&gt;

&lt;p&gt;-完全无法理解[托腮]&lt;/p&gt;

&lt;p&gt;（最后还是选择了背板）&lt;/p&gt;

&lt;p&gt;然后大概这次才是基本弄清楚了FT到底是怎么到FFT的。实际上大概就是物理是玩这个世界，然后玩着玩着开始推数学，但是数学是造一个世界自己玩，然后就越玩越远了x&lt;/p&gt;

&lt;p&gt;不过FT还是确实挺有用的（看起来Praat这个软件就是跑了个FT来分析共振峰，共振峰分析在语音学上也还是蛮有用的吧。所以说各个学科还是相互服务的。）&lt;/p&gt;

&lt;p&gt;具体大约要看松松松的课件我在这里可能讲不清楚x&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;从现有的算法来看待问题，尤其是交互式题目&lt;/h3&gt;

&lt;p&gt;比如说像营里面课上有一个交互题，题意是这样的：有一张&lt;strong&gt;有向图&lt;/strong&gt;，$n$ 个点，每个点是一个房间，度数为 $m$ ，即从房间有 $m$ 条长得一模一样的通道连出去，房间的正中间有一个石子（后面的石子可能就被移动不在中间了），你每次在一个房间里的时候可以把石子放到一条通道的左边或者右边，然后选择一条通道走出去。这里因为通道长得一样，所以你的参照物是石子，你放置石子或者走通道只能够说”我选择我刚进入这个房间的时候房间里面石子的位置顺时针转过多少个通道的那个通道“。你被随机丢到了一个房间里面，你需要遍历这个图。&lt;/p&gt;

&lt;p&gt;然后就是Tarjan改版，记一下返祖边和横叉边。&lt;/p&gt;

&lt;p&gt;还有后面比赛的题目，有一颗树，一开始只有 $1$ 已知，每一次你需要选择一个已知点 $x$ 和一个点 $y$ ，然后交互库会返回 $x$ 到 $y$ 路径上离 $x$ 最近的点 $z$，并且如果 $z$ 是未知点，它就会被标记成已知点（开地图过程）。然后你需要用 $nlogn$ 级别的操作次数开完整个地图。&lt;/p&gt;

&lt;p&gt;利用替罪羊树的重构思想可以高分甚至 $AC$。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;一些长得像“树上最长链”一样的问题的近似求解&lt;/h3&gt;

&lt;p&gt;可以使用类似于找最长链的方法，找一个基准点，找到离它最远的点，接着以这个点为基准点重复上面的操作，多次迭代，并且多选几次基准点，就有可能跑出优秀的解。&lt;/p&gt;

&lt;h3 id=&quot;etc&quot;&gt;etc…&lt;/h3&gt;

&lt;p&gt;然后学着学着就比赛了，比赛的时候T2看错题意，居然直接过了大样例，出考场完听别人说题面出锅了我才发现自己看错了题意。于是就因为这个看错题意节省了一堆时间，但是最后T1还是有12分暴力没调出来，最后就滚粗了。而且感觉自己预支了省选的RP[害怕.jpg]。&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://yourdomain.com/2018/02/08/NOIWC2018%E6%B8%B8%E8%AE%B0.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2018/02/08/NOIWC2018%E6%B8%B8%E8%AE%B0.html</guid>
        
        
      </item>
    
  </channel>
</rss>
